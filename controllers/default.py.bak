# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a sample controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
#########################################################################
<<<<<<< HEAD
import string
from gluon.tools import Crud
crud = Crud(db)

POSTS_PER_PAGE = 10

def index():
    response.flash = T("Slug Hero")
    return dict(message=T('Welcome to Slug Hero'))

def bookExchange():
    page = request.args(0,cast=int,default=0)
    start = page*POSTS_PER_PAGE
    stop = start+POSTS_PER_PAGE
    show_all = request.args(0) == 'all'

    if show_all:
        button = A('Show available items', _class="btn btn-info", _href=URL('default', 'bookExchange'))
    else:
        button = A('Show all items', _class="btn btn-info", _href=URL('default', 'bookExchange', args=['all']))

    if show_all:
        q = db.post
        listings = db().select(orderby = db.post.title, limitby=(start,stop))
    else:
        q=(db.post.status == True)
        listings = db(db.post.status == True).select(orderby = db.post.title, limitby=(start,stop))

    form = SQLFORM.grid(q,
        args=request.args[:1],
        fields=[db.post.title,
                    db.post.title,
                    db.post.body,
               ],
        editable=False, deletable=False,
        paginate=10,
        csv=False,
        create=False,
        searchable=False
        )
    return locals()

def showBook():
    image = db.post(request.args(0,cast=int)) or redirect(URL('bookExchange'))
    return locals()

def addBookItem():
    crud.messages.submit_button = 'Place on market'
    crud.settings.keepvalues = True
    crud.settings.label_separator = ' :'
    crud.settings.formstyle = 'ul'
    form = crud.create(db.post)
    return locals()

def manageBookItems():
    grid = SQLFORM.grid(db.post)
    return locals()

def showDepartment():
    depts = db().select(db.department.ALL, orderby=db.department.name)
    for dept in depts:
        dept.name=deslugify(dept.name)
    return locals()

@auth.requires_login()
def departmentCreate():
    form = crud.create(db.department,next='showDepartment')
    return locals()

@auth.requires_login()
#@auth.requires_membership('admin')
def departmentEdit():
    department = db.department(request.args(0,cast=int)) or redirect(URL('showDepartment'))
    form = crud.update(db.department,department,next='showDepartment')
    return locals()

def showCourse():
    dept = db.department(request.args(0,cast=int)) or redirect(URL('showDepartment'))
    courses = db(db.course.department_id==dept.id).select(orderby=db.course.name,limitby=(0,100))
    return locals()

@auth.requires_login()
def courseCreate():
    db.course.department_id.default = request.args(0,cast=int)
    form = crud.create(db.course,next=URL('showCourse',args=request.args(0,cast=int)))
    return locals()

@auth.requires_login()
def courseEdit():
    course = db.course(request.args(0,cast=int)) or redirect(URL('showCourse',args=request.args(0,cast=int)))
    form = crud.update(db.course,course,next='showCourse')
    return locals()

def showCourse():
    dept = db.department(request.args(0)) or redirect(URL('showDepartment'))
    dept.name = deslugify(dept.name)
    courses = db(db.course.department_id==dept.id).select(orderby=db.course.name,limitby=(0,100))
    return locals()

def showClass():
    course = db.course(request.args(0,cast=int)) or redirect(URL('showCourse',args=request.args(0,cast=int)))
    classes = db(db.ucscClass.course_id==course.id).select(orderby=db.ucscClass.yr,limitby=(0,100))
    return locals()
=======

def index():
    dept = db().select(db.department.ALL, orderby=db.department.name)
    form = SQLFORM(db.department)
    if form.process().accepted:
        response.flash = 'Department added'
    return dict(dept=dept, form=form)

def show():
    dept = db.department(request.args(0,cast=int)) or redirect(URL('index'))
    #db.course.department_id.default = dept.id
    info = db(db.course.department_id==dept.id).select()
    return dict(dept=dept, info=info)

def addCourse():
    dept = db.department(request.args(0,cast=int)) or redirect(URL('index'))
    db.course.department_id.default = dept.id
    form = SQLFORM(db.course)
    form.add_button('Back', URL('show', args=dept.id))
    if form.process().accepted:
        response.flash = 'Course added'
        redirect(URL('show', args=dept.id))
    info = db(db.course.course_id==dept.id).select()
    return dict(dept=dept, info=info, form=form)

def showClass():
    ucscClass = db.course(request.args(0, cast=int)) or redirect(URL('index'))
    info = db(db.UCSCclass.course_id==ucscClass.id).select(orderby=db.UCSCclass.year | db.UCSCclass.quarter)
    return dict(ucscClass=ucscClass, info=info)
>>>>>>> bbde310c8a1d249f3facdd19c028b4e1a49b1cf6

def check_term(form):
    q = form.vars.quarter
    y = form.vars.year
<<<<<<< HEAD
    query = db((db.ucscClass.quarter == q) & (db.ucscClass.year == y)).select()
=======
    query = db((db.UCSCclass.quarter == q) & (db.UCSCclass.year == y)).select()
>>>>>>> bbde310c8a1d249f3facdd19c028b4e1a49b1cf6
    if query:
        form.errors.query = 'Term already exists'
        response.flash = 'Term already exists'

<<<<<<< HEAD
def createClass():
    ucscClass = db.course(request.args(0, cast=int)) or redirect(URL('index'))
    db.ucscClass.course_id.default = ucscClass.id
    fields = ['syllabus', 'quarter', 'yr', 'difficulty']
    #labels = {'name':'Professor Name'}
    form = SQLFORM(db.ucscClass, fields=fields)
    form.add_button('Back', URL('showClass', args=ucscClass.id))
    if form.process(onvalidation=check_term).accepted:
        response.flash = 'Class added'
        redirect(URL('showClass', args=ucscClass.id))
    info = db(db.ucscClass.course_id==ucscClass.id).select()
    return dict(form=form)

def editClass():
    course = db.course(request.args(0,cast=int)) or redirect(URL('showClass',args=request.args(0,cast=int)))
    classes = db(db.ucscClass.course_id==course.id).select(orderby=db.ucscClass.year_,limitby=(0,100))
    return locals()

def showProfessor():
    profs = db().select(db.professor.ALL, orderby=db.professor.first_name)
    return locals()

@auth.requires_login()
def professorEdit():
    prof = db.professor(request.args(0,cast=int)) or redirect(URL('showProfessor'))
    form = crud.update(db.professor,prof,next='showProfessor')
    return locals()

#function for professorReview page
def professorReview():
    prof= db.professor(request.args(0,cast=int)) or redirect(URL('showProfessor'))
    avg=db.profReview.rating.avg()
    saltiness=db(db.profReview.professor_id==prof.id).select(avg).first()[avg]
    db(db.professor.id == prof.id).update(saltiness=saltiness)
    dept=deslugify(db.department(prof.department_id).name)
    deptname=db.department(prof.department_id).short_name
    reviews =db(db.profReview.professor_id==prof.id).select(db.profReview.ALL, orderby=db.profReview.datetime)
    return locals()

#function for posting a review for a professor for postProfessorReview page
@auth.requires_login()
def postProfessorReview():
    prof= db.professor(request.args(0,cast=int)) or redirect(URL('professorReview', args=request.args(0,cast=int)))
    db.profReview.user_id.default = auth.user.id
    db.profReview.professor_id.default = prof.id
    deptname=db.department(prof.department_id).short_name
    rep=deptname.upper()+' '+'%(course_num)s'
    db.profReview.course_id.requires = IS_IN_DB(db(db.course.department_id==prof.department_id), db.course.id,rep,zero=T('choose one'))
    form = SQLFORM(db.profReview)
    if form.process().accepted:
       avg=db.profReview.rating.avg()
       saltiness=db(db.profReview.professor_id==prof.id).select(avg).first()[avg]
       db(db.professor.id == prof.id).update(saltiness=saltiness)
       session.flash = 'review added'
       redirect(URL('default','professorReview', args=request.args(0,cast=int)))
    return locals()

#function for edit a review in the professor page
@auth.requires_login()
def editProfessorReview():
    profreview=db.profReview(request.args(0,cast=int)) or redirect(URL('professorReview', args=request.args(1,cast=int)))
    if auth.user_id == profreview.user_id:
       form = crud.update(db.profReview, profreview, next=URL('professorReview', args=request.args(1,cast=int)))
    return dict(form=form)
#@auth.requires_login()
#def professorCreate():
    #dept = db.department(request.args(0,cast=int)) or redirect(URL('index'))
    #db.course.department_id.default = dept.id
#    form = SQLFORM(db.professor)
#    if form.process().accepted:
#        response.flash = 'Professor added'
#        redirect(URL('showProfessor'))
    #info = db(db.course.course_id==dept.id).select()
#    return locals()

#this function is for adding for showProfessor page
def addProfessor():
    crud.messages.submit_button = 'Submit'
    crud.settings.keepvalues = True
    crud.settings.label_separator = ' :'
    crud.settings.formstyle = 'ul'
    form = crud.create(db.professor, next='showProfessor')
    return locals()

#Jason's function
def professorCreate():
    db.professor.department_id.default = request.args(0,cast=int)
    redirect = "showprofessor/%s" % request.args(0,cast=int)
    crud.messages.submit_button = 'Add Professor'
    crud.settings.label_separator = ' :'
    form = crud.create(db.professor)
    return locals()

#below are helen's functions for creating general discussion forum
#some of them doesn't work
def showPost():
    posts = db().select(db.post.ALL, orderby=db.post.datetime)
    return locals()

@auth.requires_login()
def postCreate():
    db.post.ucscClass_id.default = request.args(0,cast=int)
    form = crud.create(db.post,next=URL('showPost'))
    return locals()

@auth.requires_login()
def postEdit():
    post = db.post(request.args(0,cast=int)) or redirect(URL('showPost'))
    form = crud.update(db.course,course,next='showPost')
    return locals()


def showComm():
    comms = db().select(db.comm.ALL, orderby=db.comm.datetime)
    return locals()

@auth.requires_login()
def commCreate():
    db.comm.post_id_id.default = request.args(0,cast=int)
    form = crud.create(db.comm,next=URL('showComm'))
    return locals()

@auth.requires_login()
def commEdit():
    comm = db.comm(request.args(0,cast=int)) or redirect(URL('showComm'))
    form = crud.update(db.comm,comm,next='showComm')
    return locals()
=======
def addProf():
    uclass = db.UCSCclass(request.args(0, cast=int)) or redirect(URL('index'))
    form = FORM('Professor\'s name',
               INPUT(_name='name'),
               INPUT(_type='Submit'))
    response.flash = uclass.id
    if form.process().accepted:
        q = db(db.professor.name==form.vars.name).select(db.professor.ALL)
        print q
        if q:
            row = q[0]
            db(db.UCSCclass.id==uclass.id).update(professor_id=row.id)
        else:
            response.flash = form.vars.name
            db.professor.insert(name=form.vars.name)
            q = db(db.professor.name==form.vars.name).select()
            response.flash = q
            db(db.UCSCclass.id==uclass.id).update(professor_id=q[0].id)
        response.flash = 'Professor added'
        redirect(URL('term', args=uclass.id))
    return dict(form=form)

def addClass():
    ucscClass = db.course(request.args(0, cast=int)) or redirect(URL('index'))
    db.UCSCclass.course_id.default = ucscClass.id
    fields = ['description', 'quarter', 'year', 'difficulty']
    #labels = {'name':'Professor Name'}
    form = SQLFORM(db.UCSCclass, fields=fields)
    form.add_button('Back', URL('showClass', args=ucscClass.id))
    if form.process().accepted:
        response.flash = 'Class added'
        redirect(URL('showClass', args=ucscClass.id))
    info = db(db.UCSCclass.course_id==ucscClass.id).select()
    return dict(ucscClass=ucscClass, info=info, form=form)

def term():
    uclass = db.UCSCclass(request.args(0, cast=int)) or redirect(URL('index'))
    info = db(db.UCSCclass.course_id==uclass.id).select()
    classReview = db(db.classReview.class_id==uclass.id).select()
    return dict(uclass=uclass, info=info, classReview=classReview)



def showProf():
    prof = db.professor(request.args(0, cast=int)) or redirect(URL('index'))
    info = db(db.professorReview.professor_id==prof.id).select()
    return dict(prof=prof, info=info)

def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/bulk_register
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users
    """
    return dict(form=auth())

>>>>>>> bbde310c8a1d249f3facdd19c028b4e1a49b1cf6

@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()
<<<<<<< HEAD

def user():
    return dict(form=auth())


def deslugify(_slug):
    """
    Convert a SLUG back into standard format.
    e.g. "electrical-engineering" => "Electrical Engineering"
    """
    return string.capwords(_slug.replace('-', ' '))
=======
>>>>>>> bbde310c8a1d249f3facdd19c028b4e1a49b1cf6
